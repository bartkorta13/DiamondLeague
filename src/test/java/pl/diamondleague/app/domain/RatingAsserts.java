package pl.diamondleague.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RatingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRatingAllPropertiesEquals(Rating expected, Rating actual) {
        assertRatingAutoGeneratedPropertiesEquals(expected, actual);
        assertRatingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRatingAllUpdatablePropertiesEquals(Rating expected, Rating actual) {
        assertRatingUpdatableFieldsEquals(expected, actual);
        assertRatingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRatingAutoGeneratedPropertiesEquals(Rating expected, Rating actual) {
        assertThat(expected)
            .as("Verify Rating auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRatingUpdatableFieldsEquals(Rating expected, Rating actual) {
        assertThat(expected)
            .as("Verify Rating relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getAttack()).as("check attack").isEqualTo(actual.getAttack()))
            .satisfies(e -> assertThat(e.getDefense()).as("check defense").isEqualTo(actual.getDefense()))
            .satisfies(e -> assertThat(e.getEngagement()).as("check engagement").isEqualTo(actual.getEngagement()))
            .satisfies(e -> assertThat(e.getOverall()).as("check overall").isEqualTo(actual.getOverall()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRatingUpdatableRelationshipsEquals(Rating expected, Rating actual) {
        assertThat(expected)
            .as("Verify Rating relationships")
            .satisfies(e -> assertThat(e.getPlayer()).as("check player").isEqualTo(actual.getPlayer()));
    }
}
