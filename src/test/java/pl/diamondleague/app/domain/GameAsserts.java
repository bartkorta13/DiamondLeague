package pl.diamondleague.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GameAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameAllPropertiesEquals(Game expected, Game actual) {
        assertGameAutoGeneratedPropertiesEquals(expected, actual);
        assertGameAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameAllUpdatablePropertiesEquals(Game expected, Game actual) {
        assertGameUpdatableFieldsEquals(expected, actual);
        assertGameUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameAutoGeneratedPropertiesEquals(Game expected, Game actual) {
        assertThat(expected)
            .as("Verify Game auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameUpdatableFieldsEquals(Game expected, Game actual) {
        assertThat(expected)
            .as("Verify Game relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGameUpdatableRelationshipsEquals(Game expected, Game actual) {
        assertThat(expected)
            .as("Verify Game relationships")
            .satisfies(e -> assertThat(e.getStadium()).as("check stadium").isEqualTo(actual.getStadium()));
    }
}
